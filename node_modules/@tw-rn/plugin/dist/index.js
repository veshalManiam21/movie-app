"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var plugin_1 = __importDefault(require("tailwindcss/plugin"));
var defaultTheme_1 = __importDefault(require("tailwindcss/defaultTheme"));
var defaultConfig_1 = __importDefault(require("tailwindcss/defaultConfig"));
var display_1 = __importDefault(require("./display"));
var overflow_1 = __importDefault(require("./overflow"));
var position_1 = __importDefault(require("./position"));
var textAlign_1 = __importDefault(require("./textAlign"));
var borderStyle_1 = __importDefault(require("./borderStyle"));
var alignContent_1 = __importDefault(require("./alignContent"));
var alignSelf_1 = __importDefault(require("./alignSelf"));
var aspectRatio_1 = __importDefault(require("./aspectRatio"));
var borderWidth_1 = __importDefault(require("./borderWidth"));
var direction_1 = __importDefault(require("./direction"));
var inset_1 = __importDefault(require("./inset"));
var flex_1 = __importDefault(require("./flex"));
var flexBasis_1 = __importDefault(require("./flexBasis"));
var margin_1 = __importDefault(require("./margin"));
var padding_1 = __importDefault(require("./padding"));
var textShadowOffset_1 = __importDefault(require("./textShadowOffset"));
var backfaceVisibility_1 = __importDefault(require("./backfaceVisibility"));
var resizeMode_1 = __importDefault(require("./resizeMode"));
var tintColor_1 = __importDefault(require("./tintColor"));
var overlayColor_1 = __importDefault(require("./overlayColor"));
var textShadowColor_1 = __importDefault(require("./textShadowColor"));
var textShadowRadius_1 = __importDefault(require("./textShadowRadius"));
var includeFontPadding_1 = __importDefault(require("./includeFontPadding"));
var textAlignVertical_1 = __importDefault(require("./textAlignVertical"));
var fontVariant_1 = __importDefault(require("./fontVariant"));
var textDecorationColor_1 = __importDefault(require("./textDecorationColor"));
var textDecoration_1 = __importDefault(require("./textDecoration"));
var writingDirection_1 = __importDefault(require("./writingDirection"));
var variants = Object.keys(defaultConfig_1.default.variants).reduce(function (acc, v) {
    var _a;
    return (__assign(__assign({}, acc), (_a = {}, _a[v] = ["responsive"], _a)));
}, {});
var corePlugins = {
    accessibility: false,
    alignContent: false,
    alignSelf: false,
    appearance: false,
    backgroundAttachment: false,
    backgroundOpacity: false,
    backgroundPosition: false,
    backgroundRepeat: false,
    backgroundSize: false,
    borderCollapse: false,
    borderOpacity: false,
    borderStyle: false,
    borderWidth: false,
    display: false,
    divideColor: false,
    divideOpacity: false,
    divideWidth: false,
    fill: false,
    flex: false,
    float: false,
    clear: false,
    fontSmoothing: false,
    inset: false,
    listStylePosition: false,
    listStyleType: false,
    margin: false,
    objectFit: false,
    objectPosition: false,
    order: false,
    outline: false,
    overflow: false,
    padding: false,
    placeholderColor: false,
    placeholderOpacity: false,
    pointerEvents: false,
    position: false,
    resize: false,
    space: false,
    stroke: false,
    strokeWidth: false,
    tableLayout: false,
    textAlign: false,
    textOpacity: false,
    verticalAlign: false,
    visibility: false,
    whitespace: false,
    wordBreak: false,
    gap: false,
    gridAutoFlow: false,
    gridTemplateColumns: false,
    gridColumn: false,
    gridColumnStart: false,
    gridColumnEnd: false,
    gridTemplateRows: false,
    gridRow: false,
    gridRowStart: false,
    gridRowEnd: false,
    transform: false,
    transformOrigin: false,
    scale: false,
    rotate: false,
    translate: false,
    skew: false,
    textDecoration: false,
};
var flex = {
    "0": "0",
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5",
    "6": "6",
    "7": "7",
    "8": "8",
    "9": "9",
    "10": "10",
};
var _a = defaultTheme_1.default.inset, insetAuto = _a.auto, inset = __rest(_a, ["auto"]);
var _b = defaultTheme_1.default.zIndex, zIndexAuto = _b.auto, zIndex = __rest(_b, ["auto"]);
var margin = function (theme, _a) {
    var negative = _a.negative;
    return (__assign(__assign({}, theme("spacing")), negative(theme("spacing"))));
};
var width = function (theme) { return (__assign(__assign({}, theme("spacing")), { "1/2": "50%", "1/3": "33.333333%", "2/3": "66.666667%", "1/4": "25%", "2/4": "50%", "3/4": "75%", "1/5": "20%", "2/5": "40%", "3/5": "60%", "4/5": "80%", "1/6": "16.666667%", "2/6": "33.333333%", "3/6": "50%", "4/6": "66.666667%", "5/6": "83.333333%", "1/12": "8.333333%", "2/12": "16.666667%", "3/12": "25%", "4/12": "33.333333%", "5/12": "41.666667%", "6/12": "50%", "7/12": "58.333333%", "8/12": "66.666667%", "9/12": "75%", "10/12": "83.333333%", "11/12": "91.666667%", full: "100%" })); };
var maxWidth = function (theme, _a) {
    var breakpoints = _a.breakpoints;
    return (__assign({ xs: "20rem", sm: "24rem", md: "28rem", lg: "32rem", xl: "36rem", "2xl": "42rem", "3xl": "48rem", "4xl": "56rem", "5xl": "64rem", "6xl": "72rem", full: "100%" }, breakpoints(theme("screens"))));
};
var height = function (theme) { return (__assign(__assign({}, theme("spacing")), { full: "100%" })); };
var minHeight = {
    "0": "0",
    full: "100%",
};
var maxHeight = {
    full: "100%",
};
var letterSpacing = {};
var lineHeight = {
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem",
};
var _c = defaultTheme_1.default.colors, colorCurrent = _c.current, colors = __rest(_c, ["current"]);
var _d = defaultTheme_1.default.boxShadow, boxShadowInner = _d.inner, boxShadow = __rest(_d, ["inner"]);
var aspectRatio = { "1": "1" };
var flexBasis = function (theme) { return (__assign({}, theme("spacing"))); };
var textShadowOffset = {
    sm: "0px 1px",
    default: "0px 2px",
    md: "0px 4px",
    lg: "0px 10px",
    xl: "0px 20px",
    "2xl": "0px 25px",
    none: "0px 0px",
};
var fontFamily = {};
var tintColor = function (theme) { return (__assign({}, theme("colors"))); };
var overlayColor = function (theme) { return (__assign({}, theme("colors"))); };
var textShadowColor = function (theme) { return (__assign({}, theme("colors"))); };
var textShadowRadius = {
    sm: "1px",
    default: "2px",
    md: "4px",
    lg: "10px",
    xl: "20px",
    "2xl": "25px",
    none: "0px",
};
var textDecorationColor = function (theme) { return (__assign({}, theme("colors"))); };
var reactNativeConfig = function (options) {
    if (options === void 0) { options = {}; }
    return {
        theme: {
            platform: "react-native",
            inset: inset,
            zIndex: zIndex,
            margin: margin,
            width: width,
            maxWidth: maxWidth,
            height: height,
            minHeight: minHeight,
            maxHeight: maxHeight,
            letterSpacing: letterSpacing,
            lineHeight: lineHeight,
            colors: colors,
            boxShadow: boxShadow,
            aspectRatio: aspectRatio,
            flex: flex,
            flexBasis: flexBasis,
            textShadowOffset: textShadowOffset,
            fontFamily: fontFamily,
            tintColor: tintColor,
            overlayColor: overlayColor,
            textShadowColor: textShadowColor,
            textShadowRadius: textShadowRadius,
            textDecorationColor: textDecorationColor,
        },
        corePlugins: __assign(__assign({}, corePlugins), { boxSizing: false, cursor: false, userSelect: false }),
        variants: variants,
    };
};
var reactNativeWebConfig = function (options) {
    if (options === void 0) { options = {}; }
    return {
        theme: {
            platform: "react",
            inset: inset,
            zIndex: zIndex,
            margin: margin,
            width: width,
            maxWidth: maxWidth,
            height: height,
            minHeight: minHeight,
            maxHeight: maxHeight,
            letterSpacing: letterSpacing,
            lineHeight: lineHeight,
            colors: colors,
            boxShadow: boxShadow,
            flex: flex,
            fontFamily: fontFamily,
        },
        corePlugins: corePlugins,
        variants: variants,
    };
};
module.exports = plugin_1.default.withOptions(function () {
    return function (options) {
        alignContent_1.default(options);
        alignSelf_1.default(options);
        aspectRatio_1.default(options);
        borderWidth_1.default(options);
        display_1.default(options);
        overflow_1.default(options);
        position_1.default(options);
        textAlign_1.default(options);
        borderStyle_1.default(options);
        direction_1.default(options);
        inset_1.default(options);
        flex_1.default(options);
        flexBasis_1.default(options);
        margin_1.default(options);
        padding_1.default(options);
        textAlignVertical_1.default(options);
        textDecoration_1.default(options);
        if ((process.env.RN_TW_ENV || "mobile") === "mobile") {
            textShadowOffset_1.default(options);
            backfaceVisibility_1.default(options);
            resizeMode_1.default(options);
            tintColor_1.default(options);
            overlayColor_1.default(options);
            textShadowColor_1.default(options);
            textShadowRadius_1.default(options);
            includeFontPadding_1.default(options);
            fontVariant_1.default(options);
            textDecorationColor_1.default(options);
            writingDirection_1.default(options);
        }
    };
}, function (options) {
    if (options === void 0) { options = {}; }
    return (process.env.RN_TW_ENV || "mobile") === "mobile"
        ? reactNativeConfig(options)
        : reactNativeWebConfig(options);
});
//# sourceMappingURL=index.js.map