"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var postcss_1 = __importDefault(require("postcss"));
var chalk_1 = require("chalk");
var deepmerge_1 = __importDefault(require("deepmerge"));
var transformers_1 = require("./transformers");
var valid_styles_1 = require("./valid-styles");
var convertUnit = function (value) {
    var regex = /\.?\-?[0-9]+(\.[0-9]+)?rem/;
    var result = regex.exec(value) || [];
    var match = result[0];
    if (match) {
        var newValue = parseFloat(match) * 16;
        return convertUnit(value.replace(regex, newValue + "px"));
    }
    else {
        return value;
    }
};
var validateTransformedDecls = function (decls, platform) {
    Object.entries(decls).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (platform === "mobile") {
            var validStyleKey = key;
            var validStyle = valid_styles_1.reactNativeValidStyles[validStyleKey];
            if (!validStyle)
                throw new Error(key + " is not a valid prop [" + value + "]");
            if (!validStyle(value))
                throw new Error(value + " is not a valid value for " + key);
        }
        else {
            var validStyleKey = key;
            var validStyle = valid_styles_1.reactValidStyles[validStyleKey];
            if (!validStyle)
                throw new Error(key + " is not a valid prop [" + value + "]");
            if (!validStyle(value))
                throw new Error(value + " is not a valid value for " + key);
        }
    });
};
var getVars = function (rule) {
    var vars = {};
    rule.walkDecls(/^\-\-/, function (decl) {
        vars[decl.prop] = convertUnit(decl.value);
        decl.remove();
    });
    return vars;
};
var getTransformedDecls = function (rule, vars, platform) {
    var decls = [];
    rule.walkDecls(function (decl) {
        // console.log(`------\n ${yellow(decl.prop)} => ${yellow(decl.value)}`);
        // Try to replace variables if found any
        var regex = /var\((--[a-zA-Z-_]+)\)/;
        var _a = regex.exec(decl.value) || [], variableName = _a[1];
        if (variableName) {
            var value = decl.value.replace(regex, vars[variableName]);
            decls = __spreadArrays(decls, [[decl.prop, value]]);
            // console.log(` ${green(decl.prop)} => ${green(value)} \n------`);
        }
        else {
            var value = convertUnit(decl.value);
            // console.log(` ${green(decl.prop)} => ${green(value)} \n------`);
            decls = __spreadArrays(decls, [[decl.prop, value]]);
        }
    });
    try {
        var transformed = transformers_1.transform(decls);
        validateTransformedDecls(transformed, platform);
        return transformed;
    }
    catch (error) {
        console.log("" + chalk_1.redBright(error));
        return {};
    }
};
var getTransformedRule = function (rule, platform) {
    var styles = {};
    var transformedDecls = getTransformedDecls(rule, getVars(rule), platform);
    if (Object.keys(transformedDecls).length === 0) {
        rule.remove();
        return {};
    }
    rule.selectors.forEach(function (selector) {
        var newSelector = /[\.\\]/g;
        styles[selector.replace(newSelector, "")] = transformedDecls;
    });
    return styles;
};
var getNativeStyleFromAtRules = function (atRule, userRules, platform) {
    var styles = {};
    atRule.walkRules(function (rule) {
        styles = __assign(__assign({}, styles), getTransformedRule(rule, platform));
    });
    atRule.remove();
    return styles;
};
var plugin = postcss_1.default.plugin("react-native-transform", function (opts) {
    if (opts === void 0) { opts = {}; }
    var _a = opts.onProcessed, onProcessed = _a === void 0 ? function () { } : _a, _b = opts.platform, platform = _b === void 0 ? "mobile" : _b, _c = opts.userRules, userRules = _c === void 0 ? [] : _c;
    var styles = {};
    return function (root, result) {
        // Walk breakpoints
        root.walkAtRules("media", function (atRule) {
            var _a;
            styles = deepmerge_1.default(styles, (_a = {},
                _a[atRule.params] = getNativeStyleFromAtRules(atRule, userRules, platform),
                _a));
        });
        root.walkRules(function (rule) {
            styles = deepmerge_1.default(styles, { "": getTransformedRule(rule, platform) });
            rule.remove();
        });
        onProcessed(styles);
    };
});
module.exports = plugin;
//# sourceMappingURL=plugin.js.map