"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.boxShadow = void 0;
/**
 * Parses the box-shadow value to a transformable value
 * @param value box-shadow value
 */
exports.boxShadow = function (value) {
    var shadow = value.split(/,(?![^\(]*\))/)[0];
    var splitted = shadow.split(/\s(?![^\(]*\))/);
    var offsetX = "";
    var offsetY = "";
    var blurRadius = "";
    var spreadRadius = "";
    var color = "";
    switch (splitted.length) {
        case 5: {
            offsetX = splitted[0], offsetY = splitted[1], blurRadius = splitted[2], spreadRadius = splitted[3], color = splitted[4];
            var meta = { offsetX: offsetX, offsetY: offsetY, blurRadius: blurRadius, spreadRadius: spreadRadius, color: color };
            var parsed = [offsetX, offsetY, blurRadius, color].join(" ");
            return { parsed: parsed, meta: meta };
        }
        case 4: {
            offsetX = splitted[0], offsetY = splitted[1], blurRadius = splitted[2], color = splitted[3];
            var meta = { offsetX: offsetX, offsetY: offsetY, blurRadius: blurRadius, spreadRadius: spreadRadius, color: color };
            var parsed = [offsetX, offsetY, blurRadius, color].join(" ");
            return { parsed: parsed, meta: meta };
        }
        case 3: {
            offsetX = splitted[0], offsetY = splitted[1], color = splitted[2];
            var meta = { offsetX: offsetX, offsetY: offsetY, blurRadius: blurRadius, spreadRadius: spreadRadius, color: color };
            var parsed = [offsetX, offsetY, color].join(" ");
            return { parsed: parsed, meta: meta };
        }
        default: {
            offsetX = splitted[0];
            var meta = { offsetX: offsetX, offsetY: offsetY, blurRadius: blurRadius, spreadRadius: spreadRadius, color: color };
            var parsed = offsetX;
            return { parsed: parsed, meta: meta };
        }
    }
};
var parsersMap = {
    "box-shadow": exports.boxShadow,
};
exports.parse = function (prop, value) {
    if (parsersMap[prop] !== undefined) {
        return parsersMap[prop](value);
    }
    return { parsed: value, meta: {} };
};
//# sourceMappingURL=parsers.js.map