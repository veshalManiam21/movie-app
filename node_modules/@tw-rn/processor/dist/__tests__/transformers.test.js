"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var transformers_1 = require("../transformers");
describe("transformers", function () {
    describe("transitionDurationTransformer", function () {
        it("should parse milliseconds declarations", function () {
            expect(transformers_1.transitionDurationTransformer(["transition-duration", "2ms"])).toEqual({ transitionDuration: 2 });
        });
        it("should parse seconds declarations", function () {
            expect(transformers_1.transitionDurationTransformer(["transition-duration", "2s"])).toEqual({ transitionDuration: 2000 });
        });
        it("should parse seconds declarations", function () {
            expect(transformers_1.transitionDurationTransformer(["transition-duration", "0.5s"])).toEqual({ transitionDuration: 500 });
        });
        it("should error on invalid value", function () {
            expect(function () {
                return transformers_1.transitionDurationTransformer(["transition-duration", "2invalid"]);
            }).toThrow();
        });
    });
    describe("transitionDelayTransformer", function () {
        it("should parse milliseconds declarations", function () {
            expect(transformers_1.transitionDelayTransformer(["transition-delay", "2ms"])).toEqual({
                transitionDelay: 2,
            });
        });
        it("should parse seconds declarations", function () {
            expect(transformers_1.transitionDelayTransformer(["transition-delay", "2s"])).toEqual({
                transitionDelay: 2000,
            });
        });
        it("should parse seconds declarations", function () {
            expect(transformers_1.transitionDelayTransformer(["transition-delay", "0.5s"])).toEqual({
                transitionDelay: 500,
            });
        });
        it("should error on invalid value", function () {
            expect(function () {
                return transformers_1.transitionDelayTransformer(["transition-delay", "2invalid"]);
            }).toThrow();
        });
    });
    describe("transitionTimingFunctionTransformer", function () {
        describe.each([
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "linear",
            "step-start",
            "step-end",
        ])("%s", function (transition) {
            it("should parse correctly", function () {
                expect(transformers_1.transitionTimingFunctionTransformer([
                    "transition-timing-function",
                    transition,
                ])).toEqual({
                    transitionTimingFunction: {
                        type: transition,
                        args: [],
                    },
                });
            });
        });
        describe("ease", function () {
            it("should parse correctly", function () {
                expect(transformers_1.transitionTimingFunctionTransformer([
                    "transition-timing-function",
                    "ease",
                ])).toEqual({
                    transitionTimingFunction: {
                        type: "ease",
                        args: [],
                    },
                });
            });
        });
        describe("cubic-bezier", function () {
            it("should parse correctly", function () {
                expect(transformers_1.transitionTimingFunctionTransformer([
                    "transition-timing-function",
                    "cubic-bezier(0.4, 0, 1, 1)",
                ])).toEqual({
                    transitionTimingFunction: {
                        type: "bezier",
                        args: [0.4, 0, 1, 1],
                    },
                });
            });
            it("should throw when invalid", function () {
                expect(function () {
                    return transformers_1.transitionTimingFunctionTransformer([
                        "transition-timing-function",
                        "cubic-bezier(0.4, 0, 1)",
                    ]);
                }).toThrow();
            });
        });
        it("should throw if not supported", function () {
            expect(function () {
                return transformers_1.transitionTimingFunctionTransformer([
                    "transition-timing-function",
                    "not supported",
                ]);
            }).toThrow();
        });
    });
    describe("transitionPropertyTransformer", function () {
        it("should parse correctly", function () {
            expect(transformers_1.transitionPropertyTransformer(["transition-property", "none"])).toEqual({
                transitionProperty: [],
            });
            expect(transformers_1.transitionPropertyTransformer([
                "transition-property",
                "background-color, border-color, color",
            ])).toEqual({
                transitionProperty: ["background-color", "border-color", "color"],
            });
        });
    });
});
//# sourceMappingURL=transformers.test.js.map