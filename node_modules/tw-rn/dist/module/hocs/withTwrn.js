function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from "react";
import { useTailwindReactNativeStyle, usePlatformStyles, useMediaStyles, useHoverStyles, useFocusStyles, useOrientationStyles, useCombineStyles } from "../hooks";
export const withTwrn = (Component, styleKeys) => (_ref) => {
  let {
    onMouseEnter,
    onMouseLeave,
    onFocus,
    onBlur
  } = _ref,
      props = _objectWithoutProperties(_ref, ["onMouseEnter", "onMouseLeave", "onFocus", "onBlur"]);

  const tailwindReactNativeStyle = useTailwindReactNativeStyle(props, styleKeys);
  const platformStyles = usePlatformStyles(tailwindReactNativeStyle);
  const mediaStyles = useMediaStyles(platformStyles);
  const {
    hoverStyles,
    handleOnMouseEnter,
    handleOnMouseLeave
  } = useHoverStyles(platformStyles, onMouseEnter, onMouseLeave);
  const {
    focusStyles,
    handleOnFocus,
    handleOnBlur
  } = useFocusStyles(platformStyles, onFocus, onBlur);
  const orientationStyles = useOrientationStyles(platformStyles);
  const combinedStyles = useCombineStyles([mediaStyles, orientationStyles, hoverStyles, focusStyles]); // Combining styles position with keys indicated in the styleKeys

  const regularOrAnimatedStylesProps = useMemo(() => styleKeys.reduce((acc, key, index) => _objectSpread(_objectSpread({}, acc), {}, {
    [key]: combinedStyles[index]
  }), {}), [combinedStyles]); // If combinedStyles are null, it means that we're in SSR and should not
  // render because we don't have the destination size. Note: can be improved.

  if (combinedStyles.some(style => style === null)) return null;
  return /*#__PURE__*/React.createElement(Component, _extends({}, props, regularOrAnimatedStylesProps, {
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur
  }));
};
export default withTwrn;
//# sourceMappingURL=withTwrn.js.map