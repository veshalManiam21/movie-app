{"version":3,"sources":["tw.ts"],"names":["merge","memoize","Variants","platformVariants","platforVariantRegex","RegExp","join","styleVariants","Landscape","Portrait","Focus","Active","Hover","Disabled","Visited","Keyboard","styleVariantRegex","stylesEntries","Object","entries","global","__TW_RN_STYLES__","emptyStyles","findStylesWithMedia","styleName","matchingStyles","filter","styles","length","map","media","style","findStylesWithMediaMemoized","generate","styleNames","generated","reduce","acc","platformRegExpExecArray","exec","platform","platformStylesName","styleRegExpExecArray","variant","styleStyleName","foundStyles","computedStyles","computed","__","mergeStyles","stylesArray","variables","chunk","index","replace","split","Boolean","strategy","strategies","variadic","checkForTailwindStylePresence","__DEV__","console","warn","twFunction","raw","common","value","generatedValues","values","undefined","tw"],"mappings":"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","sourcesContent":["import merge from \"deepmerge\";\nimport memoize from \"fast-memoize\";\nimport {\n  Variants,\n  TailwindReactNativeStyle,\n  StyleVariants,\n  ComputedTailwindReactNativeStyles,\n  platformVariants,\n  Tw,\n  Style,\n} from \"./types\";\n\nconst platforVariantRegex = new RegExp(\n  `^(${platformVariants.join(\"|\")})?:?([:a-zA-Z_0-9-]+)$`\n);\n\nconst styleVariants: StyleVariants[] = [\n  Variants.Landscape,\n  Variants.Portrait,\n  Variants.Focus,\n  Variants.Active,\n  Variants.Hover,\n  Variants.Disabled,\n  Variants.Visited,\n  Variants.Keyboard,\n];\n\nconst styleVariantRegex = new RegExp(\n  `^(${styleVariants.join(\"|\")})?:?([:a-zA-Z_0-9-]+)$`\n);\n\nconst stylesEntries = Object.entries(global.__TW_RN_STYLES__ || []);\n\nconst emptyStyles: ComputedTailwindReactNativeStyles = {};\n\nconst findStylesWithMedia = (\n  styleName: string\n): { media: string; style: Style }[] | undefined => {\n  const matchingStyles = stylesEntries.filter(\n    ([, styles]) => typeof styles[styleName] !== \"undefined\"\n  );\n\n  if (matchingStyles.length === 0) return;\n\n  return matchingStyles.map(([media, styles]) => ({\n    media,\n    style: styles[styleName],\n  }));\n};\n\nconst findStylesWithMediaMemoized = memoize(findStylesWithMedia);\n\nexport const generate = memoize(\n  (styleNames: string[]): TailwindReactNativeStyle => {\n    if (typeof global.__TW_RN_STYLES__ === \"undefined\") return {};\n\n    const generated = styleNames.reduce<ComputedTailwindReactNativeStyles>(\n      (acc, styleName) => {\n        // Check for platform variants\n        const platformRegExpExecArray = platforVariantRegex.exec(styleName);\n\n        if (!platformRegExpExecArray) return acc;\n\n        const [\n          ,\n          platform = \"common\",\n          platformStylesName,\n        ] = platformRegExpExecArray;\n\n        // Check for style variants\n        const styleRegExpExecArray = styleVariantRegex.exec(platformStylesName);\n\n        if (!styleRegExpExecArray) return acc;\n\n        const [, variant = \"media\", styleStyleName] = styleRegExpExecArray;\n\n        const foundStyles = findStylesWithMediaMemoized(styleStyleName);\n\n        if (!foundStyles) return acc;\n\n        const computedStyles = foundStyles.reduce<\n          ComputedTailwindReactNativeStyles\n        >((acc, { media, style }) => {\n          const computed = {\n            [platform]:\n              variant === \"media\"\n                ? { [variant]: { [media]: style } }\n                : { [variant]: style },\n          };\n\n          return merge(acc, computed);\n        }, {});\n\n        return merge(acc, computedStyles);\n      },\n      { ...emptyStyles }\n    );\n\n    return { __: generated };\n  }\n);\n\nconst mergeStyles = memoize(\n  (stylesArray: TemplateStringsArray, ...variables: string[]) => {\n    return stylesArray\n      .map((chunk, index) => `${chunk}${variables[index] || \"\"}`)\n      .join(\"\")\n      .replace(/\\s{2,}/g, \" \")\n      .split(\" \")\n      .filter(Boolean);\n  },\n  {\n    strategy: memoize.strategies.variadic,\n  }\n);\n\nconst checkForTailwindStylePresence = () => {\n  if (typeof global.__TW_RN_STYLES__ === \"undefined\") {\n    __DEV__ &&\n      console.warn(\n        `Tailwind styles not found. You might be missing installations steps: https://tw-rn.github.io/tw-rn/docs/fundamentals/getting-started`\n      );\n    return false;\n  }\n  return true;\n};\n\nconst twFunction = (\n  stylesArray: TemplateStringsArray,\n  ...variables: string[]\n) => {\n  if (!checkForTailwindStylePresence()) return {};\n  return generate(mergeStyles(stylesArray, ...variables));\n};\n\ntwFunction.raw = memoize(\n  (stylesArray: TemplateStringsArray, ...variables: string[]) => {\n    if (!checkForTailwindStylePresence()) return;\n    return generate(mergeStyles(stylesArray, ...variables)).__?.common?.media?.[\n      \"\"\n    ];\n  },\n  {\n    strategy: memoize.strategies.variadic,\n  }\n);\n\ntwFunction.value = memoize(\n  (stylesArray: TemplateStringsArray, ...variables: string[]) => {\n    if (!checkForTailwindStylePresence()) return;\n\n    const generated = generate(mergeStyles(stylesArray, ...variables)).__\n      ?.common?.media?.[\"\"];\n    const generatedValues = Object.values(generated ?? {});\n\n    const value =\n      generatedValues.length === 0\n        ? undefined\n        : generatedValues.length === 1\n        ? generatedValues[0]\n        : generatedValues;\n\n    return value;\n  },\n  {\n    strategy: memoize.strategies.variadic,\n  }\n);\n\nexport const tw: Tw = twFunction;\n"]}