function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import merge from "deepmerge";
import memoize from "fast-memoize";
import { Variants, platformVariants } from "./types";
const platforVariantRegex = new RegExp("^(".concat(platformVariants.join("|"), ")?:?([:a-zA-Z_0-9-]+)$"));
const styleVariants = [Variants.Landscape, Variants.Portrait, Variants.Focus, Variants.Active, Variants.Hover, Variants.Disabled, Variants.Visited, Variants.Keyboard];
const styleVariantRegex = new RegExp("^(".concat(styleVariants.join("|"), ")?:?([:a-zA-Z_0-9-]+)$"));
const stylesEntries = Object.entries(global.__TW_RN_STYLES__ || []);
const emptyStyles = {};

const findStylesWithMedia = styleName => {
  const matchingStyles = stylesEntries.filter(([, styles]) => typeof styles[styleName] !== "undefined");
  if (matchingStyles.length === 0) return;
  return matchingStyles.map(([media, styles]) => ({
    media,
    style: styles[styleName]
  }));
};

const findStylesWithMediaMemoized = memoize(findStylesWithMedia);
export const generate = memoize(styleNames => {
  if (typeof global.__TW_RN_STYLES__ === "undefined") return {};
  const generated = styleNames.reduce((acc, styleName) => {
    // Check for platform variants
    const platformRegExpExecArray = platforVariantRegex.exec(styleName);
    if (!platformRegExpExecArray) return acc;
    const [, platform = "common", platformStylesName] = platformRegExpExecArray; // Check for style variants

    const styleRegExpExecArray = styleVariantRegex.exec(platformStylesName);
    if (!styleRegExpExecArray) return acc;
    const [, variant = "media", styleStyleName] = styleRegExpExecArray;
    const foundStyles = findStylesWithMediaMemoized(styleStyleName);
    if (!foundStyles) return acc;
    const computedStyles = foundStyles.reduce((acc, {
      media,
      style
    }) => {
      const computed = {
        [platform]: variant === "media" ? {
          [variant]: {
            [media]: style
          }
        } : {
          [variant]: style
        }
      };
      return merge(acc, computed);
    }, {});
    return merge(acc, computedStyles);
  }, _objectSpread({}, emptyStyles));
  return {
    __: generated
  };
});
const mergeStyles = memoize((stylesArray, ...variables) => {
  return stylesArray.map((chunk, index) => "".concat(chunk).concat(variables[index] || "")).join("").replace(/\s{2,}/g, " ").split(" ").filter(Boolean);
}, {
  strategy: memoize.strategies.variadic
});

const checkForTailwindStylePresence = () => {
  if (typeof global.__TW_RN_STYLES__ === "undefined") {
    __DEV__ && console.warn("Tailwind styles not found. You might be missing installations steps: https://tw-rn.github.io/tw-rn/docs/fundamentals/getting-started");
    return false;
  }

  return true;
};

const twFunction = (stylesArray, ...variables) => {
  if (!checkForTailwindStylePresence()) return {};
  return generate(mergeStyles(stylesArray, ...variables));
};

twFunction.raw = memoize((stylesArray, ...variables) => {
  var _generate$__, _generate$__$common, _generate$__$common$m;

  if (!checkForTailwindStylePresence()) return;
  return (_generate$__ = generate(mergeStyles(stylesArray, ...variables)).__) === null || _generate$__ === void 0 ? void 0 : (_generate$__$common = _generate$__.common) === null || _generate$__$common === void 0 ? void 0 : (_generate$__$common$m = _generate$__$common.media) === null || _generate$__$common$m === void 0 ? void 0 : _generate$__$common$m[""];
}, {
  strategy: memoize.strategies.variadic
});
twFunction.value = memoize((stylesArray, ...variables) => {
  var _generate$__2, _generate$__2$common, _generate$__2$common$;

  if (!checkForTailwindStylePresence()) return;
  const generated = (_generate$__2 = generate(mergeStyles(stylesArray, ...variables)).__) === null || _generate$__2 === void 0 ? void 0 : (_generate$__2$common = _generate$__2.common) === null || _generate$__2$common === void 0 ? void 0 : (_generate$__2$common$ = _generate$__2$common.media) === null || _generate$__2$common$ === void 0 ? void 0 : _generate$__2$common$[""];
  const generatedValues = Object.values(generated !== null && generated !== void 0 ? generated : {});
  const value = generatedValues.length === 0 ? undefined : generatedValues.length === 1 ? generatedValues[0] : generatedValues;
  return value;
}, {
  strategy: memoize.strategies.variadic
});
export const tw = twFunction;
//# sourceMappingURL=tw.js.map