{"version":3,"sources":["useHoverStyles.ts"],"names":["useMemo","useCallback","useState","useHoverStyles","styles","onMouseEnter","onMouseLeave","isHovered","setIsHovered","hoverStyles","map","style","undefined","hover","hasHoverStyles","length","some","Object","keys","handleOnMouseEnter","e","handleOnMouseLeave"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,QAA/B,QAA+C,OAA/C;AAGA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,MAD4B,EAE5BC,YAF4B,EAG5BC,YAH4B,KAQzB;AACH,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,WAAW,GAAGT,OAAO,CAAC,MAAM;AAChC,WAAOI,MAAM,CAACM,GAAP,CAAYC,KAAD,IAAW;AAC3B,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AAEzB,aAAOL,SAAS,GAAGI,KAAK,CAACE,KAAN,IAAe,EAAlB,GAAuB,EAAvC;AACD,KAJM,CAAP;AAKD,GAN0B,EAMxB,CAACT,MAAD,EAASG,SAAT,CANwB,CAA3B;AAQA,QAAMO,cAAc,GAAGd,OAAO,CAAC,MAAM;AACnC,WACEI,MAAM,CAACW,MAAP,GAAgB,CAAhB,IACAX,MAAM,CAACY,IAAP,CAAaL,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACE,KAAf,IAAwBI,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACE,KAAlB,EAAyBE,MAAzB,GAAkC,CAAjF,CAFF;AAID,GAL6B,EAK3B,CAACX,MAAD,CAL2B,CAA9B;AAOA,QAAMe,kBAAkB,GAAGlB,WAAW,CACnCmB,CAAD,IAAO;AACLf,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGe,CAAH,CAAZ;AACA,QAAIN,cAAJ,EAAoBN,YAAY,CAAC,IAAD,CAAZ;AACrB,GAJmC,EAKpC,CAACM,cAAD,EAAiBL,WAAjB,EAA8BJ,YAA9B,CALoC,CAAtC;AAQA,QAAMgB,kBAAkB,GAAGpB,WAAW,CACnCmB,CAAD,IAAO;AACLd,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGc,CAAH,CAAZ;AACA,QAAIN,cAAJ,EAAoBN,YAAY,CAAC,KAAD,CAAZ;AACrB,GAJmC,EAKpC,CAACM,cAAD,EAAiBL,WAAjB,EAA8BH,YAA9B,CALoC,CAAtC;AAQA,SAAO;AAAEG,IAAAA,WAAF;AAAeU,IAAAA,kBAAf;AAAmCE,IAAAA;AAAnC,GAAP;AACD,CA3CM","sourcesContent":["import { useMemo, useCallback, useState } from \"react\";\nimport { PlatformVariantStyle, Style } from \"../types\";\n\nexport const useHoverStyles = (\n  styles: (PlatformVariantStyle | undefined)[],\n  onMouseEnter?: (e: any) => void,\n  onMouseLeave?: (e: any) => void\n): {\n  hoverStyles: (Style | undefined)[];\n  handleOnMouseEnter: (e: any) => void;\n  handleOnMouseLeave: (e: any) => void;\n} => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const hoverStyles = useMemo(() => {\n    return styles.map((style) => {\n      if (style === undefined) return;\n\n      return isHovered ? style.hover || {} : {};\n    });\n  }, [styles, isHovered]);\n\n  const hasHoverStyles = useMemo(() => {\n    return (\n      styles.length > 0 &&\n      styles.some((style) => style && style.hover && Object.keys(style.hover).length > 0)\n    );\n  }, [styles]);\n\n  const handleOnMouseEnter = useCallback(\n    (e) => {\n      onMouseEnter?.(e);\n      if (hasHoverStyles) setIsHovered(true);\n    },\n    [hasHoverStyles, hoverStyles, onMouseEnter]\n  );\n\n  const handleOnMouseLeave = useCallback(\n    (e) => {\n      onMouseLeave?.(e);\n      if (hasHoverStyles) setIsHovered(false);\n    },\n    [hasHoverStyles, hoverStyles, onMouseLeave]\n  );\n\n  return { hoverStyles, handleOnMouseEnter, handleOnMouseLeave };\n};\n"]}