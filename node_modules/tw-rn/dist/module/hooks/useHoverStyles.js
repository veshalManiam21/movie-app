import { useMemo, useCallback, useState } from "react";
export const useHoverStyles = (styles, onMouseEnter, onMouseLeave) => {
  const [isHovered, setIsHovered] = useState(false);
  const hoverStyles = useMemo(() => {
    return styles.map(style => {
      if (style === undefined) return;
      return isHovered ? style.hover || {} : {};
    });
  }, [styles, isHovered]);
  const hasHoverStyles = useMemo(() => {
    return styles.length > 0 && styles.some(style => style && style.hover && Object.keys(style.hover).length > 0);
  }, [styles]);
  const handleOnMouseEnter = useCallback(e => {
    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
    if (hasHoverStyles) setIsHovered(true);
  }, [hasHoverStyles, hoverStyles, onMouseEnter]);
  const handleOnMouseLeave = useCallback(e => {
    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
    if (hasHoverStyles) setIsHovered(false);
  }, [hasHoverStyles, hoverStyles, onMouseLeave]);
  return {
    hoverStyles,
    handleOnMouseEnter,
    handleOnMouseLeave
  };
};
//# sourceMappingURL=useHoverStyles.js.map