{"version":3,"sources":["useOrientationStyles.ts"],"names":["useMemo","useCallback","useState","useEffect","Dimensions","Platform","useOrientationStyles","styles","isMobile","includes","OS","hasOrientationStyles","some","style","landscape","portrait","getOrientation","height","width","get","orientation","setOrientation","handleOnChange","addEventListener","removeEventListener","orientationStyles","map","undefined"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,cAArC;AAGA,OAAO,MAAMC,oBAAoB,GAC/BC,MADkC,IAER;AAC1B,QAAMC,QAAQ,GAAGR,OAAO,CAAC,MAAM,CAAC,KAAD,EAAQ,SAAR,EAAmBS,QAAnB,CAA4BJ,QAAQ,CAACK,EAArC,CAAP,EAAiD,EAAjD,CAAxB;AAEA,QAAMC,oBAAoB,GAAGX,OAAO,CAAC,MAAM;AACzC,WAAOO,MAAM,CAACK,IAAP,CAAaC,KAAD,IAAW,CAAC,EAAE,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,SAAP,MAAoBD,KAApB,aAAoBA,KAApB,uBAAoBA,KAAK,CAAEE,QAA3B,CAAF,CAAxB,CAAP;AACD,GAFmC,EAEjC,CAACR,MAAD,CAFiC,CAApC;AAIA,QAAMS,cAAc,GAAGf,WAAW,CAAC,MAA4C;AAC7E,QAAI,CAACO,QAAL,EAAe;AAEf,UAAM;AAAES,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAoBd,UAAU,CAACe,GAAX,CAAe,QAAf,CAA1B;AAEA,WAAOF,MAAM,GAAGC,KAAT,GAAiB,UAAjB,GAA8B,WAArC;AACD,GANiC,EAM/B,CAACX,MAAD,CAN+B,CAAlC;AAQA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAC5Cc,cAD4C,CAA9C;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,IAAIG,oBAAhB,EAAsC;AACpC,YAAMW,cAAc,GAAG,MAAMD,cAAc,CAACL,cAAD,CAA3C;;AAEAZ,MAAAA,UAAU,CAACmB,gBAAX,CAA4B,QAA5B,EAAsCD,cAAtC;AACA,aAAO,MAAM;AACXlB,QAAAA,UAAU,CAACoB,mBAAX,CAA+B,QAA/B,EAAyCF,cAAzC;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACf,MAAD,EAASS,cAAT,EAAyBK,cAAzB,EAAyCV,oBAAzC,EAA+DH,QAA/D,CATM,CAAT;AAWA,QAAMiB,iBAAiB,GAAGzB,OAAO,CAAC,MAAM;AACtC,WAAOO,MAAM,CAACmB,GAAP,CAAYb,KAAD,IAAW;AAC3B,UAAIA,KAAK,KAAKc,SAAd,EAAyB;AAEzB,UAAI,CAAChB,oBAAD,IAAyB,CAACS,WAA9B,EAA2C,OAAO,EAAP;AAE3C,YAAM;AAAEN,QAAAA,SAAS,GAAG,EAAd;AAAkBC,QAAAA,QAAQ,GAAG;AAA7B,UAAoCF,KAA1C;AAEA,aAAOO,WAAW,KAAK,WAAhB,GAA8BN,SAA9B,GAA0CC,QAAjD;AACD,KARM,CAAP;AASD,GAVgC,EAU9B,CAACR,MAAD,EAASa,WAAT,EAAsBT,oBAAtB,CAV8B,CAAjC;AAYA,SAAOc,iBAAP;AACD,CA7CM","sourcesContent":["import { useMemo, useCallback, useState, useEffect } from \"react\";\nimport { Dimensions, Platform } from \"react-native\";\nimport { PlatformVariantStyle, Style } from \"../types\";\n\nexport const useOrientationStyles = (\n  styles: (PlatformVariantStyle | undefined)[]\n): (Style | undefined)[] => {\n  const isMobile = useMemo(() => [\"ios\", \"android\"].includes(Platform.OS), []);\n\n  const hasOrientationStyles = useMemo(() => {\n    return styles.some((style) => !!(style?.landscape || style?.portrait));\n  }, [styles]);\n\n  const getOrientation = useCallback((): \"landscape\" | \"portrait\" | undefined => {\n    if (!isMobile) return;\n\n    const { height, width } = Dimensions.get(\"screen\");\n\n    return height > width ? \"portrait\" : \"landscape\";\n  }, [styles]);\n\n  const [orientation, setOrientation] = useState<\"landscape\" | \"portrait\" | undefined>(\n    getOrientation\n  );\n\n  useEffect(() => {\n    if (isMobile && hasOrientationStyles) {\n      const handleOnChange = () => setOrientation(getOrientation);\n\n      Dimensions.addEventListener(\"change\", handleOnChange);\n      return () => {\n        Dimensions.removeEventListener(\"change\", handleOnChange);\n      };\n    }\n  }, [styles, getOrientation, setOrientation, hasOrientationStyles, isMobile]);\n\n  const orientationStyles = useMemo(() => {\n    return styles.map((style) => {\n      if (style === undefined) return;\n\n      if (!hasOrientationStyles || !orientation) return {};\n\n      const { landscape = {}, portrait = {} } = style;\n\n      return orientation === \"landscape\" ? landscape : portrait;\n    });\n  }, [styles, orientation, hasOrientationStyles]);\n\n  return orientationStyles;\n};\n"]}