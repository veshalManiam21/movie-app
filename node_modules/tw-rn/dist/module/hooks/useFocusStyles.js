import { useMemo, useCallback, useState } from "react";
export const useFocusStyles = (styles, onFocus, onBlur) => {
  const [isFocused, setIsFocused] = useState(false);
  const focusStyles = useMemo(() => {
    return styles.map(style => {
      if (style === undefined) return;
      return isFocused ? style.focus || {} : {};
    });
  }, [styles, isFocused]);
  const hasfocusStyles = useMemo(() => {
    return styles.length > 0 && styles.some(style => style && style.focus && Object.keys(style.focus).length > 0);
  }, [styles]);
  const handleOnFocus = useCallback(e => {
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    if (hasfocusStyles) setIsFocused(true);
  }, [hasfocusStyles, focusStyles, onFocus]);
  const handleOnBlur = useCallback(e => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    if (hasfocusStyles) setIsFocused(false);
  }, [hasfocusStyles, focusStyles, onBlur]);
  return {
    focusStyles,
    handleOnFocus,
    handleOnBlur
  };
};
//# sourceMappingURL=useFocusStyles.js.map