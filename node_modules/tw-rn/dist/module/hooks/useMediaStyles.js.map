{"version":3,"sources":["useMediaStyles.ts"],"names":["useMemo","useCallback","useState","useEffect","Platform","merge","isPlainObject","useMediaStyles","styles","isWeb","OS","isNotBrowser","window","matchMedia","mediaQueryList","reduce","acc","style","undefined","media","queries","Object","keys","getCurrentMediaQueryValue","reverse","find","key","matches","currentMediaQueryValue","setCurrentMediaQueryValue","handler","forEach","query","addListener","removeListener","mediaStyles","map","defaultStyles","mediaQueryStyles","isMergeableObject"],"mappings":"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","sourcesContent":["import { useMemo, useCallback, useState, useEffect } from \"react\";\nimport { Platform } from \"react-native\";\nimport merge from \"deepmerge\";\nimport isPlainObject from \"is-plain-object\";\nimport { PlatformVariantStyle, Style } from \"../types\";\n\nexport const useMediaStyles = (\n  styles: (PlatformVariantStyle | undefined)[]\n): (Style | null | undefined)[] => {\n  // Get the media query list matches from window\n  const isWeb = Platform.OS === \"web\";\n  const isNotBrowser = typeof window === \"undefined\" || typeof window.matchMedia === \"undefined\";\n\n  const mediaQueryList = useMemo((): { [key: string]: MediaQueryList } => {\n    if (!isWeb || isNotBrowser) return {};\n\n    const mediaQueryList = styles.reduce<{ [key: string]: MediaQueryList }>((acc, style) => {\n      if (style === undefined) return acc;\n\n      const { media = {} } = style;\n      const queries = Object.keys(media);\n\n      const matchMedia = queries.reduce((acc, media) => {\n        return { ...acc, [media]: window.matchMedia(media) };\n      }, {});\n\n      return { ...acc, ...matchMedia };\n    }, {});\n\n    return mediaQueryList;\n  }, [styles]);\n\n  // Get the media query that current matches\n  const getCurrentMediaQueryValue = useCallback(() => {\n    const queries = Object.keys(mediaQueryList);\n\n    // If is not found, set '' as default\n    return queries.reverse().find((key) => mediaQueryList[key].matches) || \"\";\n  }, [mediaQueryList]);\n\n  const [currentMediaQueryValue, setCurrentMediaQueryValue] = useState<string>(\n    getCurrentMediaQueryValue\n  );\n\n  // Set the initial media query value\n  // This works to re-render the component once it mounts from SSR\n  useEffect(() => {\n    setCurrentMediaQueryValue(getCurrentMediaQueryValue());\n  }, []);\n\n  // Add the event handlers for switching styles depending on the media query\n  // If we don't have any media queries this won't add anything, so if we're not\n  // in a Window (web w/o SRR) it won't crash\n  useEffect(() => {\n    if (isWeb && !isNotBrowser) {\n      const handler = () => setCurrentMediaQueryValue(getCurrentMediaQueryValue);\n\n      const queries = Object.keys(mediaQueryList);\n\n      queries.forEach((query) => mediaQueryList[query].addListener(handler));\n\n      return () => {\n        queries.forEach((query) => mediaQueryList[query].removeListener(handler));\n      };\n    }\n  }, [styles, currentMediaQueryValue, mediaQueryList]);\n\n  const mediaStyles = useMemo(() => {\n    return styles.map((style) => {\n      if (style === undefined) return;\n\n      const { media = {} } = style;\n\n      // if is SSR, return undefined\n      if (isWeb && isNotBrowser) return null;\n\n      const defaultStyles = media?.[\"\"] || {};\n\n      // If is web, combine the non related media query values ('')\n      // with the current media query\n      if (isWeb) {\n        const mediaQueryStyles = media?.[currentMediaQueryValue] || {};\n        return merge(defaultStyles, mediaQueryStyles, { isMergeableObject: isPlainObject });\n      }\n\n      // Else, return the non related media query values\n      return defaultStyles;\n    });\n  }, [styles, currentMediaQueryValue, mediaQueryList]);\n\n  return mediaStyles;\n};\n"]}