function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useMemo, useCallback, useState, useEffect } from "react";
import { Platform } from "react-native";
import merge from "deepmerge";
import isPlainObject from "is-plain-object";
export const useMediaStyles = styles => {
  // Get the media query list matches from window
  const isWeb = Platform.OS === "web";
  const isNotBrowser = typeof window === "undefined" || typeof window.matchMedia === "undefined";
  const mediaQueryList = useMemo(() => {
    if (!isWeb || isNotBrowser) return {};
    const mediaQueryList = styles.reduce((acc, style) => {
      if (style === undefined) return acc;
      const {
        media = {}
      } = style;
      const queries = Object.keys(media);
      const matchMedia = queries.reduce((acc, media) => {
        return _objectSpread(_objectSpread({}, acc), {}, {
          [media]: window.matchMedia(media)
        });
      }, {});
      return _objectSpread(_objectSpread({}, acc), matchMedia);
    }, {});
    return mediaQueryList;
  }, [styles]); // Get the media query that current matches

  const getCurrentMediaQueryValue = useCallback(() => {
    const queries = Object.keys(mediaQueryList); // If is not found, set '' as default

    return queries.reverse().find(key => mediaQueryList[key].matches) || "";
  }, [mediaQueryList]);
  const [currentMediaQueryValue, setCurrentMediaQueryValue] = useState(getCurrentMediaQueryValue); // Set the initial media query value
  // This works to re-render the component once it mounts from SSR

  useEffect(() => {
    setCurrentMediaQueryValue(getCurrentMediaQueryValue());
  }, []); // Add the event handlers for switching styles depending on the media query
  // If we don't have any media queries this won't add anything, so if we're not
  // in a Window (web w/o SRR) it won't crash

  useEffect(() => {
    if (isWeb && !isNotBrowser) {
      const handler = () => setCurrentMediaQueryValue(getCurrentMediaQueryValue);

      const queries = Object.keys(mediaQueryList);
      queries.forEach(query => mediaQueryList[query].addListener(handler));
      return () => {
        queries.forEach(query => mediaQueryList[query].removeListener(handler));
      };
    }
  }, [styles, currentMediaQueryValue, mediaQueryList]);
  const mediaStyles = useMemo(() => {
    return styles.map(style => {
      if (style === undefined) return;
      const {
        media = {}
      } = style; // if is SSR, return undefined

      if (isWeb && isNotBrowser) return null;
      const defaultStyles = (media === null || media === void 0 ? void 0 : media[""]) || {}; // If is web, combine the non related media query values ('')
      // with the current media query

      if (isWeb) {
        const mediaQueryStyles = (media === null || media === void 0 ? void 0 : media[currentMediaQueryValue]) || {};
        return merge(defaultStyles, mediaQueryStyles, {
          isMergeableObject: isPlainObject
        });
      } // Else, return the non related media query values


      return defaultStyles;
    });
  }, [styles, currentMediaQueryValue, mediaQueryList]);
  return mediaStyles;
};
//# sourceMappingURL=useMediaStyles.js.map