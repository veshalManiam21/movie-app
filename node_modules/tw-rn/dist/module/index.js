function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as RN from "react-native";
import { withTwrn } from "./hocs";
export * from "./types";
export { tw } from "./tw";
export { withTwrn }; // Basic Components

export const View = withTwrn(RN.View, ["style"]);
export const Text = withTwrn(RN.Text, ["style"]);
export const Image = withTwrn(RN.Image, ["style"]);
export const TextInput = withTwrn(RN.TextInput, ["style"]);
export const ScrollView = withTwrn(RN.ScrollView, ["style", "contentContainerStyle"]); // User interface

export const Switch = withTwrn(RN.Switch, ["style"]); // List Views

export const FlatList = withTwrn(RN.FlatList, ["style", "contentContainerStyle", "ListFooterComponentStyle", "ListHeaderComponentStyle", "columnWrapperStyle"]);
export const SectionList = withTwrn(RN.SectionList, ["style", "contentContainerStyle"]); // Android Components and APIs

export const DrawerLayoutAndroid = withTwrn(RN.DrawerLayoutAndroid, ["style"]); // Others

export const ActivityIndicator = withTwrn(RN.ActivityIndicator, ["style"]);
export const KeyboardAvoidingView = withTwrn(RN.KeyboardAvoidingView, ["style"]); // Rest

export const ImageBackground = withTwrn(RN.ImageBackground, ["style", "imageStyle"]);
export const SafeAreaView = withTwrn(RN.SafeAreaView, ["style"]);
export const TouchableHighlight = withTwrn(RN.TouchableHighlight, ["style"]);
export const TouchableOpacity = withTwrn(RN.TouchableOpacity, ["style"]);
export const TouchableWithoutFeedback = withTwrn(RN.TouchableWithoutFeedback, ["style"]); // For some reason "ListFooterComponentStyle" and "ListHeaderComponentStyle" are not in FlatList type
// definitions but they are in the docs https://reactnative.dev/docs/virtualizedlist

export const VirtualizedList = withTwrn(RN.VirtualizedList, ["style", "contentContainerStyle", "ListFooterComponentStyle", "ListHeaderComponentStyle"]);
export const Animated = _objectSpread(_objectSpread({}, RN.Animated), {}, {
  Image: withTwrn(RN.Animated.Image, ["style"]),
  ScrollView: withTwrn(RN.Animated.ScrollView, ["style", "contentContainerStyle"]),
  Text: withTwrn(RN.Animated.Text, ["style"]),
  View: withTwrn(RN.Animated.View, ["style"]),
  FlatList: withTwrn(RN.Animated.FlatList, ["style", "contentContainerStyle", "ListFooterComponentStyle", "ListHeaderComponentStyle", "columnWrapperStyle"]),
  SectionList: withTwrn(RN.Animated.SectionList, ["style", "contentContainerStyle"])
});
//# sourceMappingURL=index.js.map