import { Platform } from "react-native";
import merge from "deepmerge";
import isPlainObject from "is-plain-object";
export const convertToTailwindReactNativeStyle = style => {
  var _ref, _ref2;

  if (style === undefined) return; // If is an array

  if (Array.isArray(style)) {
    // TODO: deal with this typing
    return style.reduce((acc, style) => {
      return merge(acc, convertToTailwindReactNativeStyle(style) || {}, {
        isMergeableObject: isPlainObject
      });
    }, {
      __: {}
    });
  }

  const isTailwindStyle = !!((_ref = style) === null || _ref === void 0 ? void 0 : _ref.__); // If is already a tw style, do nothing

  if (isTailwindStyle) return style; // If not, convert it to tw style as a default screen style

  return {
    __: {
      common: {
        media: {
          "": (_ref2 = style) !== null && _ref2 !== void 0 ? _ref2 : {}
        }
      }
    }
  };
};
export const getStylesFromPlatform = styles => {
  if (styles === undefined) return;
  const common = styles.common || {};
  const os = Platform.OS; // Native os variant handling

  const isNative = Platform.OS === "android" || Platform.OS === "ios";
  const nativeStyles = isNative && styles.native ? styles.native : {}; // OS specific styles

  const osStyles = styles[os] || {};
  return merge.all([common, osStyles, nativeStyles], {
    isMergeableObject: isPlainObject
  });
};
//# sourceMappingURL=helpers.js.map