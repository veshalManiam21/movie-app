"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStylesFromPlatform = exports.convertToTailwindReactNativeStyle = void 0;

var _reactNative = require("react-native");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _isPlainObject = _interopRequireDefault(require("is-plain-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const convertToTailwindReactNativeStyle = style => {
  var _ref, _ref2;

  if (style === undefined) return; // If is an array

  if (Array.isArray(style)) {
    // TODO: deal with this typing
    return style.reduce((acc, style) => {
      return (0, _deepmerge.default)(acc, convertToTailwindReactNativeStyle(style) || {}, {
        isMergeableObject: _isPlainObject.default
      });
    }, {
      __: {}
    });
  }

  const isTailwindStyle = !!((_ref = style) === null || _ref === void 0 ? void 0 : _ref.__); // If is already a tw style, do nothing

  if (isTailwindStyle) return style; // If not, convert it to tw style as a default screen style

  return {
    __: {
      common: {
        media: {
          "": (_ref2 = style) !== null && _ref2 !== void 0 ? _ref2 : {}
        }
      }
    }
  };
};

exports.convertToTailwindReactNativeStyle = convertToTailwindReactNativeStyle;

const getStylesFromPlatform = styles => {
  if (styles === undefined) return;
  const common = styles.common || {};
  const os = _reactNative.Platform.OS; // Native os variant handling

  const isNative = _reactNative.Platform.OS === "android" || _reactNative.Platform.OS === "ios";
  const nativeStyles = isNative && styles.native ? styles.native : {}; // OS specific styles

  const osStyles = styles[os] || {};
  return _deepmerge.default.all([common, osStyles, nativeStyles], {
    isMergeableObject: _isPlainObject.default
  });
};

exports.getStylesFromPlatform = getStylesFromPlatform;
//# sourceMappingURL=helpers.js.map