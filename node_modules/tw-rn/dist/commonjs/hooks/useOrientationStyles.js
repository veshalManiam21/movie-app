"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOrientationStyles = void 0;

var _react = require("react");

var _reactNative = require("react-native");

const useOrientationStyles = styles => {
  const isMobile = (0, _react.useMemo)(() => ["ios", "android"].includes(_reactNative.Platform.OS), []);
  const hasOrientationStyles = (0, _react.useMemo)(() => {
    return styles.some(style => !!((style === null || style === void 0 ? void 0 : style.landscape) || (style === null || style === void 0 ? void 0 : style.portrait)));
  }, [styles]);
  const getOrientation = (0, _react.useCallback)(() => {
    if (!isMobile) return;

    const {
      height,
      width
    } = _reactNative.Dimensions.get("screen");

    return height > width ? "portrait" : "landscape";
  }, [styles]);
  const [orientation, setOrientation] = (0, _react.useState)(getOrientation);
  (0, _react.useEffect)(() => {
    if (isMobile && hasOrientationStyles) {
      const handleOnChange = () => setOrientation(getOrientation);

      _reactNative.Dimensions.addEventListener("change", handleOnChange);

      return () => {
        _reactNative.Dimensions.removeEventListener("change", handleOnChange);
      };
    }
  }, [styles, getOrientation, setOrientation, hasOrientationStyles, isMobile]);
  const orientationStyles = (0, _react.useMemo)(() => {
    return styles.map(style => {
      if (style === undefined) return;
      if (!hasOrientationStyles || !orientation) return {};
      const {
        landscape = {},
        portrait = {}
      } = style;
      return orientation === "landscape" ? landscape : portrait;
    });
  }, [styles, orientation, hasOrientationStyles]);
  return orientationStyles;
};

exports.useOrientationStyles = useOrientationStyles;
//# sourceMappingURL=useOrientationStyles.js.map