"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCombineStyles = void 0;

var _react = require("react");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _isPlainObject = _interopRequireDefault(require("is-plain-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const useCombineStyles = stylesToCombine => {
  return (0, _react.useMemo)(() => {
    const mergedStyles = stylesToCombine.reduce((acc, styles) => {
      const merged = styles.map((style, index) => {
        // Building up the array
        if (acc.length - 1 < index) return style;
        if (style === undefined) return acc[index];
        if (style === null || acc[index] === null || acc[index] === undefined) return null;
        return (0, _deepmerge.default)(_objectSpread({}, acc[index]), style, {
          isMergeableObject: _isPlainObject.default
        });
      }, {});
      return merged;
    }, []);
    return mergedStyles;
  }, stylesToCombine);
};

exports.useCombineStyles = useCombineStyles;
//# sourceMappingURL=useCombineStyles.js.map