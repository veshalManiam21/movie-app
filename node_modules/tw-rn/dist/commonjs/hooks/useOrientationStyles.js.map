{"version":3,"sources":["useOrientationStyles.ts"],"names":["useOrientationStyles","styles","isMobile","includes","Platform","OS","hasOrientationStyles","some","style","landscape","portrait","getOrientation","height","width","Dimensions","get","orientation","setOrientation","handleOnChange","addEventListener","removeEventListener","orientationStyles","map","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AAGO,MAAMA,oBAAoB,GAC/BC,MADkC,IAER;AAC1B,QAAMC,QAAQ,GAAG,oBAAQ,MAAM,CAAC,KAAD,EAAQ,SAAR,EAAmBC,QAAnB,CAA4BC,sBAASC,EAArC,CAAd,EAAwD,EAAxD,CAAjB;AAEA,QAAMC,oBAAoB,GAAG,oBAAQ,MAAM;AACzC,WAAOL,MAAM,CAACM,IAAP,CAAaC,KAAD,IAAW,CAAC,EAAE,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,SAAP,MAAoBD,KAApB,aAAoBA,KAApB,uBAAoBA,KAAK,CAAEE,QAA3B,CAAF,CAAxB,CAAP;AACD,GAF4B,EAE1B,CAACT,MAAD,CAF0B,CAA7B;AAIA,QAAMU,cAAc,GAAG,wBAAY,MAA4C;AAC7E,QAAI,CAACT,QAAL,EAAe;;AAEf,UAAM;AAAEU,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAoBC,wBAAWC,GAAX,CAAe,QAAf,CAA1B;;AAEA,WAAOH,MAAM,GAAGC,KAAT,GAAiB,UAAjB,GAA8B,WAArC;AACD,GANsB,EAMpB,CAACZ,MAAD,CANoB,CAAvB;AAQA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgC,qBACpCN,cADoC,CAAtC;AAIA,wBAAU,MAAM;AACd,QAAIT,QAAQ,IAAII,oBAAhB,EAAsC;AACpC,YAAMY,cAAc,GAAG,MAAMD,cAAc,CAACN,cAAD,CAA3C;;AAEAG,8BAAWK,gBAAX,CAA4B,QAA5B,EAAsCD,cAAtC;;AACA,aAAO,MAAM;AACXJ,gCAAWM,mBAAX,CAA+B,QAA/B,EAAyCF,cAAzC;AACD,OAFD;AAGD;AACF,GATD,EASG,CAACjB,MAAD,EAASU,cAAT,EAAyBM,cAAzB,EAAyCX,oBAAzC,EAA+DJ,QAA/D,CATH;AAWA,QAAMmB,iBAAiB,GAAG,oBAAQ,MAAM;AACtC,WAAOpB,MAAM,CAACqB,GAAP,CAAYd,KAAD,IAAW;AAC3B,UAAIA,KAAK,KAAKe,SAAd,EAAyB;AAEzB,UAAI,CAACjB,oBAAD,IAAyB,CAACU,WAA9B,EAA2C,OAAO,EAAP;AAE3C,YAAM;AAAEP,QAAAA,SAAS,GAAG,EAAd;AAAkBC,QAAAA,QAAQ,GAAG;AAA7B,UAAoCF,KAA1C;AAEA,aAAOQ,WAAW,KAAK,WAAhB,GAA8BP,SAA9B,GAA0CC,QAAjD;AACD,KARM,CAAP;AASD,GAVyB,EAUvB,CAACT,MAAD,EAASe,WAAT,EAAsBV,oBAAtB,CAVuB,CAA1B;AAYA,SAAOe,iBAAP;AACD,CA7CM","sourcesContent":["import { useMemo, useCallback, useState, useEffect } from \"react\";\nimport { Dimensions, Platform } from \"react-native\";\nimport { PlatformVariantStyle, Style } from \"../types\";\n\nexport const useOrientationStyles = (\n  styles: (PlatformVariantStyle | undefined)[]\n): (Style | undefined)[] => {\n  const isMobile = useMemo(() => [\"ios\", \"android\"].includes(Platform.OS), []);\n\n  const hasOrientationStyles = useMemo(() => {\n    return styles.some((style) => !!(style?.landscape || style?.portrait));\n  }, [styles]);\n\n  const getOrientation = useCallback((): \"landscape\" | \"portrait\" | undefined => {\n    if (!isMobile) return;\n\n    const { height, width } = Dimensions.get(\"screen\");\n\n    return height > width ? \"portrait\" : \"landscape\";\n  }, [styles]);\n\n  const [orientation, setOrientation] = useState<\"landscape\" | \"portrait\" | undefined>(\n    getOrientation\n  );\n\n  useEffect(() => {\n    if (isMobile && hasOrientationStyles) {\n      const handleOnChange = () => setOrientation(getOrientation);\n\n      Dimensions.addEventListener(\"change\", handleOnChange);\n      return () => {\n        Dimensions.removeEventListener(\"change\", handleOnChange);\n      };\n    }\n  }, [styles, getOrientation, setOrientation, hasOrientationStyles, isMobile]);\n\n  const orientationStyles = useMemo(() => {\n    return styles.map((style) => {\n      if (style === undefined) return;\n\n      if (!hasOrientationStyles || !orientation) return {};\n\n      const { landscape = {}, portrait = {} } = style;\n\n      return orientation === \"landscape\" ? landscape : portrait;\n    });\n  }, [styles, orientation, hasOrientationStyles]);\n\n  return orientationStyles;\n};\n"]}