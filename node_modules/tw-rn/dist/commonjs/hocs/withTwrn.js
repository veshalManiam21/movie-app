"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.withTwrn = void 0;

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const withTwrn = (Component, styleKeys) => (_ref) => {
  let {
    onMouseEnter,
    onMouseLeave,
    onFocus,
    onBlur
  } = _ref,
      props = _objectWithoutProperties(_ref, ["onMouseEnter", "onMouseLeave", "onFocus", "onBlur"]);

  const tailwindReactNativeStyle = (0, _hooks.useTailwindReactNativeStyle)(props, styleKeys);
  const platformStyles = (0, _hooks.usePlatformStyles)(tailwindReactNativeStyle);
  const mediaStyles = (0, _hooks.useMediaStyles)(platformStyles);
  const {
    hoverStyles,
    handleOnMouseEnter,
    handleOnMouseLeave
  } = (0, _hooks.useHoverStyles)(platformStyles, onMouseEnter, onMouseLeave);
  const {
    focusStyles,
    handleOnFocus,
    handleOnBlur
  } = (0, _hooks.useFocusStyles)(platformStyles, onFocus, onBlur);
  const orientationStyles = (0, _hooks.useOrientationStyles)(platformStyles);
  const combinedStyles = (0, _hooks.useCombineStyles)([mediaStyles, orientationStyles, hoverStyles, focusStyles]); // Combining styles position with keys indicated in the styleKeys

  const regularOrAnimatedStylesProps = (0, _react.useMemo)(() => styleKeys.reduce((acc, key, index) => _objectSpread(_objectSpread({}, acc), {}, {
    [key]: combinedStyles[index]
  }), {}), [combinedStyles]); // If combinedStyles are null, it means that we're in SSR and should not
  // render because we don't have the destination size. Note: can be improved.

  if (combinedStyles.some(style => style === null)) return null;
  return /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, regularOrAnimatedStylesProps, {
    onMouseEnter: handleOnMouseEnter,
    onMouseLeave: handleOnMouseLeave,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur
  }));
};

exports.withTwrn = withTwrn;
var _default = withTwrn;
exports.default = _default;
//# sourceMappingURL=withTwrn.js.map