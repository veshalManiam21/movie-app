{"version":3,"sources":["index.ts"],"names":["Variants","DefaultPlatformVariant","Common","platformVariants","Native","Web","Ios","Android"],"mappings":";;;;;;IAgBYA,Q;;;WAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,wBAAAA,Q;;AAiBL,MAAMC,sBAAsB,GAAGD,QAAQ,CAACE,MAAxC;;AASA,MAAMC,gBAAmC,GAAG,CACjDH,QAAQ,CAACE,MADwC,EAEjDF,QAAQ,CAACI,MAFwC,EAGjDJ,QAAQ,CAACK,GAHwC,EAIjDL,QAAQ,CAACM,GAJwC,EAKjDN,QAAQ,CAACO,OALwC,CAA5C","sourcesContent":["import { TargetedEvent, NativeSyntheticEvent, StyleProp } from \"react-native\";\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      __TW_RN_STYLES__:\n        | {\n            [key: string]: {\n              [styleName: string]: { [styleProp: string]: number | string };\n            };\n          }\n        | undefined;\n    }\n  }\n}\n\nexport enum Variants {\n  Common = \"common\",\n  Native = \"native\",\n  Web = \"web\",\n  Ios = \"ios\",\n  Android = \"android\",\n  Media = \"media\",\n  Portrait = \"portrait\",\n  Landscape = \"landscape\",\n  Focus = \"focus\",\n  Active = \"active\",\n  Hover = \"hover\",\n  Disabled = \"disabled\",\n  Visited = \"visited\",\n  Keyboard = \"keyboard\",\n}\n\nexport const DefaultPlatformVariant = Variants.Common;\n\nexport type PlatformVariant =\n  | Variants.Common\n  | Variants.Native\n  | Variants.Web\n  | Variants.Ios\n  | Variants.Android;\n\nexport const platformVariants: PlatformVariant[] = [\n  Variants.Common,\n  Variants.Native,\n  Variants.Web,\n  Variants.Ios,\n  Variants.Android,\n];\n\nexport type StyleVariants =\n  | Variants.Landscape\n  | Variants.Portrait\n  | Variants.Focus\n  | Variants.Active\n  | Variants.Hover\n  | Variants.Disabled\n  | Variants.Visited\n  | Variants.Keyboard;\n\nexport type StyleValue = string | number | boolean | object | undefined;\n\nexport type Style = { [style: string]: StyleValue };\n\nexport type MediaStyles = {\n  [Variants.Media]?: { [media: string]: Style };\n};\n\nexport type VariantsStyles = { [key in StyleVariants]?: any };\n\nexport type PlatformVariantStyle = MediaStyles & VariantsStyles;\n\nexport type ComputedTailwindReactNativeStyles = {\n  [key in PlatformVariant]?: PlatformVariantStyle;\n};\n\nexport type TailwindReactNativeStyle = {\n  __?: ComputedTailwindReactNativeStyles;\n};\n\nexport type TailwindReactNativeStyleProps<P, O extends keyof P> = {\n  [key in O]?: StyleProp<TailwindReactNativeStyle & P[O]>;\n} &\n  Omit<P, O>;\n\nexport type VariantsProps = {\n  onMouseEnter?: (e: any) => void;\n  onMouseLeave?: (e: any) => void;\n  onFocus?: (e: NativeSyntheticEvent<TargetedEvent>) => void;\n  onBlur?: (e: NativeSyntheticEvent<TargetedEvent>) => void;\n};\n\nexport interface Tw {\n  (\n    stylesArray: TemplateStringsArray,\n    ...variables: string[]\n  ): TailwindReactNativeStyle;\n  /**\n   * Gets the raw styles from Tailwind\n   *\n   * ```js\n   * tw.raw`bg-white` // yields { backgroundColor: '#ffffff' }\n   * ```\n   */\n  raw: (\n    stylesArray: TemplateStringsArray,\n    ...variables: string[]\n  ) => Style | undefined;\n  /**\n   * Gets the value or values of a Tailwind style\n   *\n   * ```js\n   * tw.value`bg-white` // yields \"#ffffff\"\n   * ```\n   */\n  value: (\n    stylesArray: TemplateStringsArray,\n    ...variables: string[]\n  ) => StyleValue | StyleValue[];\n}\n"]}