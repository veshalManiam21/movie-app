{"version":3,"sources":["helpers.ts"],"names":["convertToTailwindReactNativeStyle","style","undefined","Array","isArray","reduce","acc","isMergeableObject","isPlainObject","__","isTailwindStyle","common","media","getStylesFromPlatform","styles","os","Platform","OS","isNative","nativeStyles","native","osStyles","merge","all"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAUO,MAAMA,iCAAiC,GAC5CC,KAD+C,IAEI;AAAA;;AACnD,MAAIA,KAAK,KAAKC,SAAd,EAAyB,OAD0B,CAGnD;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB;AACA,WAAQA,KAAD,CAAiBI,MAAjB,CACL,CAACC,GAAD,EAAML,KAAN,KAAgB;AACd,aAAO,wBAAMK,GAAN,EAAWN,iCAAiC,CAACC,KAAD,CAAjC,IAA4C,EAAvD,EAA2D;AAChEM,QAAAA,iBAAiB,EAAEC;AAD6C,OAA3D,CAAP;AAGD,KALI,EAML;AAAEC,MAAAA,EAAE,EAAE;AAAN,KANK,CAAP;AAQD;;AACD,QAAMC,eAAe,GAAG,CAAC,UAAET,KAAF,yCAAC,KAAqCQ,EAAtC,CAAzB,CAfmD,CAiBnD;;AACA,MAAIC,eAAJ,EAAqB,OAAOT,KAAP,CAlB8B,CAoBnD;;AACA,SAAO;AAAEQ,IAAAA,EAAE,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAE,uBAAKX,KAAL,yCAAsB;AAAxB;AAAT;AAAV;AAAN,GAAP;AACD,CAxBM;;;;AA0BA,MAAMY,qBAAqB,GAChCC,MADmC,IAEE;AACrC,MAAIA,MAAM,KAAKZ,SAAf,EAA0B;AAE1B,QAAMS,MAAM,GAAGG,MAAM,CAACH,MAAP,IAAiB,EAAhC;AAEA,QAAMI,EAAmB,GAAGC,sBAASC,EAArC,CALqC,CAOrC;;AACA,QAAMC,QAAQ,GAAGF,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASC,EAAT,KAAgB,KAA9D;AACA,QAAME,YAAY,GAAGD,QAAQ,IAAIJ,MAAM,CAACM,MAAnB,GAA4BN,MAAM,CAACM,MAAnC,GAA4C,EAAjE,CATqC,CAWrC;;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAACC,EAAD,CAAN,IAAc,EAA/B;AAEA,SAAOO,mBAAMC,GAAN,CAAU,CAACZ,MAAD,EAASU,QAAT,EAAmBF,YAAnB,CAAV,EAA4C;AACjDZ,IAAAA,iBAAiB,EAAEC;AAD8B,GAA5C,CAAP;AAGD,CAnBM","sourcesContent":["import { Platform, StyleProp } from \"react-native\";\nimport merge from \"deepmerge\";\nimport isPlainObject from \"is-plain-object\";\n\nimport {\n  TailwindReactNativeStyle,\n  ComputedTailwindReactNativeStyles,\n  PlatformVariantStyle,\n  PlatformVariant,\n  platformVariants,\n} from \"./types\";\n\nexport const convertToTailwindReactNativeStyle = (\n  style: StyleProp<TailwindReactNativeStyle>\n): Required<TailwindReactNativeStyle> | undefined => {\n  if (style === undefined) return;\n\n  // If is an array\n  if (Array.isArray(style)) {\n    // TODO: deal with this typing\n    return (style as any[]).reduce(\n      (acc, style) => {\n        return merge(acc, convertToTailwindReactNativeStyle(style) || {}, {\n          isMergeableObject: isPlainObject,\n        });\n      },\n      { __: {} }\n    );\n  }\n  const isTailwindStyle = !!(style as TailwindReactNativeStyle)?.__;\n\n  // If is already a tw style, do nothing\n  if (isTailwindStyle) return style as Required<TailwindReactNativeStyle>;\n\n  // If not, convert it to tw style as a default screen style\n  return { __: { common: { media: { \"\": (style as any) ?? {} } } } };\n};\n\nexport const getStylesFromPlatform = (\n  styles?: ComputedTailwindReactNativeStyles\n): PlatformVariantStyle | undefined => {\n  if (styles === undefined) return;\n\n  const common = styles.common || {};\n\n  const os: PlatformVariant = Platform.OS as any;\n\n  // Native os variant handling\n  const isNative = Platform.OS === \"android\" || Platform.OS === \"ios\";\n  const nativeStyles = isNative && styles.native ? styles.native : {};\n\n  // OS specific styles\n  const osStyles = styles[os] || {};\n\n  return merge.all([common, osStyles, nativeStyles], {\n    isMergeableObject: isPlainObject,\n  });\n};\n"]}