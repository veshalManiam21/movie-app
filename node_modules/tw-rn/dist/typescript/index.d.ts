/// <reference types="react" />
import * as RN from "react-native";
import { withTwrn } from "./hocs";
export * from "./types";
export { tw } from "./tw";
export { withTwrn };
export declare const View: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ViewProps, "style">>;
export declare const Text: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.TextProps, "style">>;
export declare const Image: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ImageProps, "style">>;
export declare const TextInput: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.TextInputProps, "style">>;
export declare const ScrollView: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ScrollViewProps, "style" | "contentContainerStyle">>;
export declare const Switch: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.SwitchProps, "style">>;
export declare const FlatList: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.FlatListProps<unknown>, "style" | "contentContainerStyle" | "ListFooterComponentStyle" | "ListHeaderComponentStyle" | "columnWrapperStyle">>;
export declare const SectionList: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.SectionListProps<unknown>, "style" | "contentContainerStyle">>;
export declare const DrawerLayoutAndroid: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.DrawerLayoutAndroidProps, "style">>;
export declare const ActivityIndicator: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ActivityIndicatorProps, "style">>;
export declare const KeyboardAvoidingView: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.KeyboardAvoidingViewProps, "style">>;
export declare const ImageBackground: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ImageBackgroundProps, "style" | "imageStyle">>;
export declare const SafeAreaView: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.ViewProps, "style">>;
export declare const TouchableHighlight: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.TouchableHighlightProps, "style">>;
export declare const TouchableOpacity: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.TouchableOpacityProps, "style">>;
export declare const TouchableWithoutFeedback: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.TouchableWithoutFeedbackProps, "style">>;
declare type VirtualizedListPropsWithMissingStyles<ItemT> = {
    ListFooterComponentStyle?: any;
    ListHeaderComponentStyle?: any;
} & RN.VirtualizedListProps<ItemT>;
export declare const VirtualizedList: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<VirtualizedListPropsWithMissingStyles<unknown>, "style" | "contentContainerStyle" | "ListFooterComponentStyle" | "ListHeaderComponentStyle">>;
export declare const Animated: {
    Image: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.ImageProps & import("react").RefAttributes<RN.Image>>, "style">>;
    ScrollView: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.ScrollViewProps & import("react").RefAttributes<RN.ScrollView>>, "style" | "contentContainerStyle">>;
    Text: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.TextProps & import("react").RefAttributes<RN.Text>>, "style">>;
    View: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.ViewProps & import("react").RefAttributes<RN.View>>, "style">>;
    FlatList: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.FlatListProps<unknown> & import("react").RefAttributes<RN.FlatList<unknown>>>, "style" | "contentContainerStyle" | "ListFooterComponentStyle" | "ListHeaderComponentStyle" | "columnWrapperStyle">>;
    SectionList: import("react").ComponentType<import("./hocs/withTwrn").VariantProps<RN.Animated.AnimatedProps<RN.SectionListProps<unknown> & import("react").RefAttributes<RN.SectionList<unknown>>>, "style" | "contentContainerStyle">>;
    decay(value: RN.Animated.Value | RN.Animated.ValueXY, config: RN.Animated.DecayAnimationConfig): RN.Animated.CompositeAnimation;
    add(a: RN.Animated.Animated, b: RN.Animated.Animated): RN.Animated.AnimatedAddition;
    subtract(a: RN.Animated.Animated, b: RN.Animated.Animated): RN.Animated.AnimatedSubtraction;
    divide(a: RN.Animated.Animated, b: RN.Animated.Animated): RN.Animated.AnimatedDivision;
    multiply(a: RN.Animated.Animated, b: RN.Animated.Animated): RN.Animated.AnimatedMultiplication;
    modulo(a: RN.Animated.Animated, modulus: number): RN.Animated.AnimatedModulo;
    diffClamp(a: RN.Animated.Animated, min: number, max: number): RN.Animated.AnimatedDiffClamp;
    delay(time: number): RN.Animated.CompositeAnimation;
    sequence(animations: RN.Animated.CompositeAnimation[]): RN.Animated.CompositeAnimation;
    stagger(time: number, animations: RN.Animated.CompositeAnimation[]): RN.Animated.CompositeAnimation;
    loop(animation: RN.Animated.CompositeAnimation, config?: RN.Animated.LoopAnimationConfig | undefined): RN.Animated.CompositeAnimation;
    spring(value: RN.Animated.Value | RN.Animated.ValueXY, config: RN.Animated.SpringAnimationConfig): RN.Animated.CompositeAnimation;
    parallel(animations: RN.Animated.CompositeAnimation[], config?: RN.Animated.ParallelConfig | undefined): RN.Animated.CompositeAnimation;
    event<T>(argMapping: (RN.Animated.Value | {
        [key: string]: RN.Animated.Mapping;
    } | null)[], config?: RN.Animated.EventConfig<T> | undefined): (...args: any[]) => void;
    createAnimatedComponent<T_1 extends import("react").ComponentType<any>>(component: T_1): RN.Animated.AnimatedComponent<T_1>;
    Animated: typeof RN.Animated.Animated;
    AnimatedWithChildren: typeof RN.Animated.AnimatedWithChildren;
    AnimatedInterpolation: typeof RN.Animated.AnimatedInterpolation;
    Value: typeof RN.Animated.Value;
    ValueXY: typeof RN.Animated.ValueXY;
    timing: (value: RN.Animated.Value | RN.Animated.ValueXY, config: RN.Animated.TimingAnimationConfig) => RN.Animated.CompositeAnimation;
    AnimatedAddition: typeof RN.Animated.AnimatedAddition;
    AnimatedSubtraction: typeof RN.Animated.AnimatedSubtraction;
    AnimatedDivision: typeof RN.Animated.AnimatedDivision;
    AnimatedMultiplication: typeof RN.Animated.AnimatedMultiplication;
    AnimatedModulo: typeof RN.Animated.AnimatedModulo;
    AnimatedDiffClamp: typeof RN.Animated.AnimatedDiffClamp;
};
//# sourceMappingURL=index.d.ts.map